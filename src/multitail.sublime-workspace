{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "extern crate getopts;\nextern crate term;\nextern crate notify;\n#[cfg(target_os = \"macos\")]\nextern crate fsevent;\nuse std::sync::mpsc::{Sender, channel};\nuse std::sync::{Arc, Mutex};\nuse std::{thread, env, str};\nuse std::thread::JoinHandle;\nuse std::fs;\nuse std::fs::File;\nuse std::io::SeekFrom;\nuse std::io::prelude::*;\nuse term::color::*;\nuse term::Terminal;\nuse getopts::Options;\nuse notify::{RecommendedWatcher, PollWatcher, Error, Watcher, op};\n\nmacro_rules! lock_wr_fl (\n	($con:ident , $fmtstr:expr, $($args:tt)*) => (\n		{\n			let mut $con = $con.lock().unwrap();\n			write!($con, $fmtstr, $($args)*).unwrap();\n			let _unused_ret_val = $con.flush();\n			$con.reset().unwrap();\n		}\n	);\n	($con:ident, $fmtstr:expr) => (\n		{\n			let mut $con = $con.lock().unwrap();\n			write!($con, $fmtstr).unwrap();\n			let _unused_ret_val = $con.flush();\n			$con.reset().unwrap();\n		}\n	);\n	// We don't reset the colors, the next writer is responsible for setting the correct color\n	($con:ident : $fg:ident : $bg:ident, $fmtstr:expr, $($args:tt)*) => (\n		{\n			let mut $con = $con.lock().unwrap();\n			$con.fg($fg).unwrap();\n			$con.bg($bg).unwrap();\n			write!($con, $fmtstr, $($args)*).unwrap();\n			let _unused_ret_val = $con.flush();\n			$con.reset().unwrap();\n		}\n	);\n	($con:ident : $fg:ident : $bg:ident, $fmtstr:expr) => (\n		{\n			let mut $con = $con.lock().unwrap();\n			$con.fg($fg).unwrap();\n			$con.bg($bg).unwrap();\n			write!($con, $fmtstr).unwrap();\n			let _unused_ret_val = $con.flush();\n			$con.reset().unwrap();\n		}\n	);\n);\n\nfn print_usage(program: &str, opts: Options) {\n	let brief = format!(\"Usage: {} FILE [FILE]*\", program);\n	print!(\"{}\", opts.usage(&brief));\n}\n\nfn main() {\n	let args: Vec<String> = env::args().collect();\n	let program = args[0].clone();\n	let mut opts = Options::new();\n	opts.optflag(\"h\", \"help\", \"Print this help menu\");\n\n	let matches = match opts.parse(&args[1..]) {\n		Ok(m)		=> { m },\n		Err(f) 	=> { panic!(f.to_string()) },\n	};\n	if matches.opt_present(\"h\") {\n		print_usage(&program, opts);\n		return;\n	}\n\n	if !matches.free.is_empty() {\n		println!(\"free args: {}\", matches.free.len());\n		start_all_tails(matches.free);\n	} else {\n		print_usage(&program, opts);\n		return;\n	};\n}\n\nfn start_all_tails(matches: Vec<String>) {\n	static FG_COLORS: [u16; 8] = [YELLOW, BRIGHT_BLUE, BRIGHT_GREEN, BRIGHT_CYAN, BRIGHT_MAGENTA,\n	BRIGHT_WHITE, BRIGHT_CYAN, BRIGHT_RED];\n	static BG_COLORS: [u16; 3] = [BLACK, BLUE, RED];\n	static FG_COLOR_LEN: usize = 8;\n	static BG_COLOR_LEN: usize = 3; // FG_COLORS.len() * BG_COLORS.len(), add more BG colors and attributes\n	let mut fg_color_idx = 0;\n	let mut bg_color_idx = 0;\n	let mut terminal = term::stdout().unwrap();\n	let console = Arc::new(Mutex::new(terminal));\n	let mut handles = vec![];\n	for filepath in matches.iter() {\n		lock_wr_fl!(console, \"\\nFollowing \\\"{}\\\".\", filepath);\n		let console = console.clone();\n		let filepath = filepath.clone();\n		handles.push(thread::spawn(move || {\n			start_tail(filepath, console, FG_COLORS[fg_color_idx].clone(),\n				BG_COLORS[bg_color_idx].clone());\n		}));\n		fg_color_idx = (fg_color_idx + 1) % FG_COLOR_LEN;\n		bg_color_idx = (bg_color_idx + 1) % BG_COLOR_LEN;\n	}\n\n	while handles.len() > 0 {\n		let handle = handles.pop();\n		if let Some(h) = handle {\n			h.join();\n		}\n	}\n}\nstruct CrossPlatformChannel {\n	join_handle: Option<JoinHandle<()>>,\n	watcher: Option<RecommendedWatcher>,\n}\n\nimpl CrossPlatformChannel {\n	#[cfg(target_os = \"macos\")]\n	pub fn new<T: Terminal + ?Sized>(tx: Sender<fsevent::Event>, filepath: String,\n		console: &Arc<Mutex<Box<T>>>) -> CrossPlatformChannel {\n			// let fp = filepath.clone();\n			// let jh: JoinHandle<()> = thread::spawn(move || {\n			//    let fsevent = fsevent::FsEvent::new(tx);\n			//    fsevent.append_path(&filepath);\n			//    fsevent.observe();\n			//  });\n			// lock_wr_fl!(console, \"Got observer for file: \\\"{}\\\"\", fp);\n			// CrossPlatformChannel{join_handle: Some(jh), watcher: None}\n			// You can't watch some files (a lot of the files you would want to tail) using FSEvents\n			// So I'm just going to default to the polling watcher on MacOS\n		let mut w: Result<PollWatcher, Error> = PollWatcher::new(tx);\n		let watcher = match w {\n			Ok(mut watcher) => {\n				lock_wr_fl!(console, \"\\nGot watcher for file: \\\"{}\\\"\", filepath);\n				Some(watcher)\n			},\n			Err(err) 				=> {\n				lock_wr_fl!(console, \"\\nFailed to get watcher for file: \\\"{}\\\" with error:\\n{:?}\",\n					filepath, err);\n				None\n			},\n		};\n		CrossPlatformChannel{join_handle: None, watcher: watcher}\n	}\n\n	#[cfg(any(target_os = \"linux\", target_os = \"windows\"))]\n	pub fn new<T: Terminal + ?Sized>(tx: Sender<notify::Event>, filepath: String,\n		console: &Arc<Mutex<Box<T>>>) -> CrossPlatformChannel {\n		let mut w: Result<RecommendedWatcher, Error> = RecommendedWatcher::new(tx);\n		let watcher = match w {\n			Ok(mut watcher) => {\n				watcher.watch(&filepath);\n				lock_wr_fl!(console, \"\\nGot watcher for file: \\\"{}\\\"\", filepath);\n				Some(watcher)a\n			},\n			Err(err) 				=> {\n				lock_wr_fl!(console, \"\\nFailed to get watcher for file: \\\"{}\\\" with error:\\n{:?}\",\n					filepath, err);\n				None\n			},\n		};\n		CrossPlatformChannel{join_handle: None, watcher: watcher}\n	}\n}\n\nfn start_tail<T: Terminal + ?Sized>(filepath: String, console: Arc<Mutex<Box<T>>>, fg_color: u16,\n	bg_color: u16) {\n	println!(\"Start tail fg: {}, bg: {}\", fg_color, bg_color);\n	// Currently the notify library for Rust doesn't work with MacOS X FSEvents on Rust 1.6.0,\n	// and MacOS 10.10.5, so there's two different config methods for setting up a channel\n	let (tx, rx) = channel();\n	let _channel = CrossPlatformChannel::new(tx, filepath.clone(), &console);\n	let mut buf: [u8;2048] = [0; 2048];\n	let (mut file, buf_slice) = open_and_seek(&filepath, &mut buf);\n	lock_wr_fl!(console: fg_color: bg_color, \"\\n{}\", str::from_utf8(buf_slice).unwrap());\n	loop {\n\n		match rx.recv() {\n			Ok(event) => {\n				if event.op.unwrap() == op::WRITE {\n					//Read from file\n					let mut buf: Vec<u8> = vec![];\n					let _bytes_read = file.read_to_end(& mut buf).unwrap();\n					let last_nl = find_last_nl(&buf);\n					// console.attr(attr);\n					// TODO: actually handle the result\n					lock_wr_fl!(console : fg_color : bg_color, \"{}\",\n						str::from_utf8(&buf[..last_nl]).unwrap());\n					// Seek back to just after the last nl\n					file.seek(SeekFrom::Current(last_nl as i64 - buf.len() as i64 - 1)).unwrap();\n				}\n			},\n			_ => (),\n		}\n	}\n}\n\nfn open_and_seek<'a>(filepath: &str, buf: &'a mut [u8;2048]) -> (File, &'a [u8]) {\n	// Output up to the last 2 newlines or 2048 bytes, whichever is less\n	const GET_BYTES: u64 = 2048u64;\n	let mut file = File::open(filepath).unwrap();\n	let mut size: u64 = fs::metadata(filepath).unwrap().len();\n	if size > GET_BYTES {\n		size = GET_BYTES;\n	}\n	let mut bytes: Vec<u8> = vec![];\n	let nls = 0;\n	file.seek(SeekFrom::End(-(size as i64))).unwrap();\n	file.read_to_end(&mut bytes);\n	for i in 0..bytes.len() - 1 {\n		if bytes[size as usize -1 - i] == 0x0A {\n			nls += 1;\n			if nls == 2 {\n				// Found the second newline, don't include it in the returned slice\n				return (file, &buf[..i]);\n			}\n		}\n		buf[i] = bytes[i];\n	}\n	// Didn't find 2 newlines, just return 2048 bytes of data\n	return (file, &buf[..]);\n}\n\nfn find_last_nl(buf: &Vec<u8>) -> usize {\n	let iter = buf.iter().rev();\n	let len = buf.len();\n	for i in 0..len {\n		if buf[len - 1 - i] == 0x0A {\n			if i+1 < len && buf[len - 2 - i] == 0x0D {\n				return len - 2 - i;\n			} else {\n				return len - 1 - i;\n			}\n		}\n	}\n	return buf.len() - 1;\n}\n",
			"file": "main.rs",
			"file_size": 7456,
			"file_write_time": 130988984300000000,
			"settings":
			{
				"buffer_size": 7457,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib.rs",
			"settings":
			{
				"buffer_size": 6059,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 87.0,
		"last_filter": "Package Control: Instal",
		"selected_items":
		[
			[
				"Package Control: Instal",
				"Package Control: Install Package"
			],
			[
				"Package Control: Ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: In",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 288.0,
		"history":
		[
			"view.run_command('example')",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/joel.self/Projects/multitail-lib",
		"/Users/joel.self/Projects/multitail-lib/src"
	],
	"file_history":
	[
		"/Users/joel.self/Projects/multitail-lib/multitail.sublime-workspace",
		"/Users/joel.self/Projects/multitail/src/main.rs",
		"/Users/joel.self/Projects/Sublime/Default.sublime-package",
		"/Users/joel.self/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/joel.self/tmp.rs",
		"/Users/joel.self/Library/Application Support/Sublime Text 2/Packages/Color Scheme - Default/Monokai.tmTheme",
		"/Users/joel.self/Library/Application Support/Sublime Text 3/Packages/BeautifyRust/Default (OSX).sublime-keymap",
		"/Users/joel.self/Library/Application Support/Sublime Text 3/Packages/User/BeautifyRust.sublime-settings",
		"/Users/joel.self/Library/Application Support/Sublime Text 3/Packages/BeautifyRust/BeautifyRust.sublime-settings",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160115131925.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160111085633.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160111151354.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEComMgr20160111195838.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160113074225.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160111131608.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160114071628.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160114095150.log",
		"/Users/joel.self/Downloads/logs/logs/LRAIEEngine20160111111240.log",
		"/Users/joel.self/Library/Application Support/Sublime Text 3/Packages/LogView/logview.sublime-settings",
		"/Users/joel.self/Library/Application Support/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/Users/joel.self/Library/Application Support/Sublime Text 3/Packages/User/Package Control.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\\n",
			"635883596647183496.dat",
			"635881001956999499.dat",
			"635881069023125806.dat",
			"635881215171949188.dat",
			"635882669467339015.dat",
			"635881001968650675.dat",
			"635880999906823556.dat",
			"635881001956999499.dat",
			"635883596647183496.dat",
			" 635883596647183496.dat",
			"635881001956999499.dat",
			"635883596647183496.dat",
			"635857464269278927.dat",
			"635883743661779848.dat",
			"635883507911125814.dat",
			"635881001968870886.dat",
			"635880979389806802.dat",
			"635880979379336759.dat",
			"635880979379296724.dat",
			"635881156695815779.dat",
			"***ERROR*** An error occurred restoring state for Block",
			"***WARNING*** State file ",
			"AI Engine shutting down NOW",
			"permission",
			"13100",
			"Caught exception",
			"caught exception",
			"caught execption"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7457,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								7457
							]
						],
						"settings":
						{
							"rulers":
							[
								100
							],
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2026.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib.rs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 6059,
						"regions":
						{
						},
						"selection":
						[
							[
								571,
								571
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 469.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "multitail.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 215.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
